{"version":3,"sources":["utils/levels.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["levels","5x5","10x10","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","boardId","painter","isBoardSolved","drawBoard","bind","assertThisInitialized","cellCheck","isSolved","nextProps","nextContext","setState","label","Math","floor","random","length","indx","levelCount","split","row","col","concat","toString","replace","e","_this2","cellId","target","id","cellClass","document","getElementById","classList","value","some","el","isThisSolved","console","log","handleWinner","_this$state","filledCells","slice","getElementsByClassName","map","boardCols","boardRows","levelSummed","reduce","prev","cur","res","Array","fill","forEach","cell","every","val","react_default","a","createElement","onClick","dangerouslySetInnerHTML","__html","style","margin","border","Component","App","keys","winner","handleBoardChange","validation","className","onChange","marginBottom","level","key","Board_Board","display","role","aria-label","window","location","reload","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c68f918.chunk.js","sourcesContent":["export const levels = {\n  \"5x5\": [\n    [\n      [1],\n      [2, 1],\n      [3],\n      [3],\n      [3],\n      [1],\n      [1, 1],\n      [3],\n      [3],\n      [3, 1]\n    ],\n    [\n      [3],\n      [1],\n      [3],\n      [2],\n      [4],\n      [2],\n      [1, 1, 1],\n      [1, 3],\n      [3],\n      [1]\n    ],\n  ],\n\n  \"10x10\": [\n    [\n      [1, 7],\n      [6],\n      [7],\n      [7],\n      [9],\n      [1, 3],\n      [7],\n      [1],\n      [1],\n      [1],\n      [1, 1],\n      [2],\n      [2],\n      [5],\n      [5, 1],\n      [5, 3],\n      [5, 1],\n      [7],\n      [3, 3, 1],\n      [3, 2]\n    ]\n  ]\n};","import React, { Component } from \"react\";\nimport { levels } from \"../../utils/levels\";\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: \"\",\n      boardId: \"\",\n      painter: \"\",\n      isBoardSolved: false\n    };\n\n    this.drawBoard = this.drawBoard.bind(this);\n    this.cellCheck = this.cellCheck.bind(this);\n    this.isSolved = this.isSolved.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setState(\n      {\n        board: nextProps.label,\n        boardId: Math.floor(\n          Math.random() *\n            (levels[nextProps.label] ? levels[nextProps.label].length : 0)\n        )\n      },\n      this.drawBoard\n    );\n  }\n\n  componentDidMount() {\n    this.setState(\n      {\n        board: this.props.label,\n        boardId: Math.floor(\n          Math.random() *\n            (levels[this.props.label] ? levels[this.props.label].length : 0)\n        )\n      },\n      this.drawBoard\n    );\n  }\n\n  drawBoard() {\n    let indx = 0;\n    const levelCount = ++this.props.label.split(\"x\")[0];\n    let painter = \"\";\n    for (let row = 0; row < levelCount; row++) {\n      painter += \"<tr>\";\n      for (let col = 0; col < levelCount; col++) {\n        painter += `<td id=${row}-${col} class=\"empty\" style=\"${\n          row === 1 && col === 0 ? \"width: 100px\" : \"\"\n        }\">\n    ${\n      !row && !col\n        ? \"\"\n        : !row || !col\n        ? levels[this.props.label][this.state.boardId][indx++]\n            .toString()\n            .replace(/,/g, \"\")\n        : \"\"\n    }\n  </td>`;\n      }\n      painter += \"</tr>\";\n    }\n\n    this.setState({ painter });\n  }\n\n  cellCheck(e) {\n    const cellId = e.target.id;\n    const cellClass =\n      document.getElementById(cellId) &&\n      document.getElementById(cellId).classList.value;\n\n    if (\n      cellClass &&\n      !cellId.split(\"-\").some(el => el === \"0\") &&\n      cellId !== \"board\"\n    ) {\n      document.getElementById(cellId).classList.value =\n        cellClass === \"empty\"\n          ? \"doubtful\"\n          : cellClass === \"doubtful\"\n          ? \"fill\"\n          : cellClass === \"fill\"\n          ? \"empty\"\n          : \"empty\";\n    }\n\n    const isThisSolved = this.isSolved();\n    this.setState({isBoardSolved: isThisSolved}, ()=>console.log(this.state.isBoardSolved));\n    if(isThisSolved) this.props.handleWinner(isThisSolved);\n  }\n\n  isSolved() {\n    const { board, boardId } = this.state;\n\n    let filledCells = [].slice.call(document.getElementsByClassName('fill'));\n    filledCells = filledCells.map(e => e.id);\n    const boardCols = +board.split('x')[0];\n    const boardRows = +board.split('x')[1];\n    const levelSummed = levels[board][boardId].map(e => e.reduce((prev, cur) => prev + cur, 0))\n    const res = new Array(boardCols+boardRows).fill(0);\n    filledCells.forEach(cell => {\n      const id = cell.split('-');\n      res[--(id[0]) + boardCols]++;\n      res[--(id[1])]++;\n    })\n\n    return res.every((val, indx) => val === levelSummed[indx]);\n  }\n\n  render() {\n    return (\n      <table\n        id=\"board\"\n        onClick={this.cellCheck}\n        dangerouslySetInnerHTML={{ __html: this.state.painter }}\n        style={{ margin: \"0 auto\", border: \"none\" }}\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board/Board';\nimport { levels } from './utils/levels';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      label: Object.keys(levels)[0],\n      winner: false\n    }\n\n    this.handleBoardChange = this.handleBoardChange.bind(this);\n    this.handleWinner = this.handleWinner.bind(this);\n  }\n\n  async handleBoardChange(e) {\n    await this.setState({ label: e.target.value });\n  }\n\n  handleWinner(validation) {\n    this.setState({winner: validation});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Nonogram, Solve the Japanese Puzzle!</h1>\n        <div className=\"game custom-select\">\n          <label className=\"settings\">\n            Select Level:\n          <select\n              id=\"levels\"\n              onChange={this.handleBoardChange}\n              style={{ marginBottom: 15 }}\n            >\n              {\n                Object.keys(levels).map(level =>\n                  <option value={level} key={level}>{level}</option>\n                )\n              }\n            </select>\n          </label>\n          <Board\n            label={this.state.label}\n            handleWinner={this.handleWinner}\n          />\n        </div>\n        <div\n          className=\"winner\"\n          style={{display: this.state.winner ? 'initial' : 'none'}}\n        >\n              <p>You're Winner <span role=\"img\" aria-label=\"rocket\">🚀</span></p>\n              <p>あなたは勝者です <span role=\"img\" aria-label=\"rocket\">🚀</span></p>\n\n              <button onClick={() => window.location.reload()}>Play Again?</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}